package com.revature.services;

import com.revature.DAOs.TeamDAO;
import com.revature.DAOs.UserDAO;
import com.revature.models.DTOs.IncomingUserDTO;
import com.revature.models.Team;
import com.revature.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service //make this class a bean
public class UserService {

    //constructor inject the UserDAO and the TeamDAO
    private final UserDAO userDAO;
    private final TeamDAO teamDAO;

    @Autowired
    public UserService(UserDAO userDAO, TeamDAO teamDAO) {
        this.userDAO = userDAO;
        this.teamDAO = teamDAO;
    }

    //insert a new User into the DB
    public User insertUser(IncomingUserDTO userDTO){

        //TODO: make sure the userDTO fields are present and valid
        //TODO: make sure the incoming username is unique

        //We need to turn the userDTO into a User (DAO takes a User object)
        //userId will get autogenerated, so 0 will get overwritten
        //username, password, and role come from the DTO
        //team will be set using the teamId from the DTO (find it by ID)
        User user = new User(0,
                userDTO.getUsername(),
                userDTO.getPassword(),
                userDTO.getRole(),
                null);

        //using the TeamDAO to get a team by ID
        //findById() returns an optional,
        //which we can use to avoid nulls and help with error handling
        Optional<Team> team = teamDAO.findById(userDTO.getTeamId());

        //if the team is not present, throw an exception with message "team not found"
        if(team.isEmpty()){
            throw new IllegalArgumentException(
                    "No Team found with ID " + userDTO.getTeamId());
        } else {
            //if the team is present, set the user's team to the found team
            //.get() is the method we use to extract values from Optionals
            user.setTeam(team.get());

            //finally, we can send the User to the DAO
            return userDAO.save(user);
        }

    }

    //update user password



}